---
name: chaos testing for kubi with Litmus
on:
  - push
jobs:
  kind:
    runs-on: ubuntu-latest
    name: create cluster KinD  with (1.21,1.23) Kub version
    strategy:
      fail-fast: false
      matrix:
        kubernetes:
          - 1.21
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Create cluster KinD
        uses: helm/kind-action@v1.4.0
        with:
          config: .github/kind-cluster-${{ matrix.kubernetes }}.yaml
      - name: testing cluster kinD
        run: kubectl cluster-info --context kind-chart-testing echo " current-context:"
          $(kubectl config current-context)
                 
      - name: Setting up kubeconfig ENV for Github Chaos Action
        run: echo ::set-env name=KUBE_CONFIG_DATA::$(base64 -w 0 ~/.kube/config)
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17
          go-path: ${{ github.workspace }}/go
          
      - name: Set GOROOT
        run: echo "export GOROOT=/opt/hostedtoolcache/go/1.17.13/x64" >> $GITHUB_ENV

      - name: Install cfssl and cfssljson
        run: |
            VERSION=$(curl --silent "https://api.github.com/repos/cloudflare/cfssl/releases/latest" | grep '"tag_name"' | sed -E 's/.*"([^"]+)".*/\1/')
            VNUMBER=${VERSION#"v"}
            wget https://github.com/cloudflare/cfssl/releases/download/${VERSION}/cfssljson_${VNUMBER}_linux_amd64 -O cfssljson
            chmod +x cfssljson
            sudo mv cfssljson /usr/local/bin
            cfssljson -version
            VERSION=$(curl --silent "https://api.github.com/repos/cloudflare/cfssl/releases/latest" | grep '"tag_name"' | sed -E 's/.*"([^"]+)".*/\1/')
            VNUMBER=${VERSION#"v"}
            wget https://github.com/cloudflare/cfssl/releases/download/${VERSION}/cfssl_${VNUMBER}_linux_amd64 -O cfssl
            chmod +x cfssl
            sudo mv cfssl /usr/local/bin
 

      - name: deploy crds 
        run : |
          kubectl apply -f https://raw.githubusercontent.com/ca-gip/kubi/master/deployments/kube-local-config.yml
          
      - name: Create certificate for kubi
        run : |
         chmod +x ./.github/Csr.sh
         ./.github/Csr.sh
        
      - name: crete secret for kubi ldap
        run: |
          kubectl -n kube-system create secret generic kubi-secret \
           --from-literal ldap_passwd='password'
           
      - name: Deploy the prerequisites
        run: |
         kubectl apply -f https://raw.githubusercontent.com/ca-gip/kubi/master/deployments/kube-prerequisites.yml
       
      - name:  local config (ldap deploy + configmap kubi-ldap + configmap openldap)
        run: |
          kubectl apply -f https://raw.githubusercontent.com/ca-gip/kubi/master/deployments/kube-local-config.yml
          
       # Copy the secret from you Kubernetes cluster
     
      - name: Create secret dirs on your local machine   
        run : |
               sudo mkdir -p  /var/run/secrets/{certs,ecdsa,kubernetes.io}
               sudo mkdir  /var/run/secrets/kubernetes.io/serviceaccount
              
               kubectl -n kube-system get secrets $( kubectl -n kube-system get sa kubi-user -o "jsonpath={.secrets[0].name}") -o "jsonpath={.data['ca\.crt']}" | base64 -d > ca.crt
               kubectl -n kube-system get secrets $(kubectl -n kube-system get sa kubi-user -o "jsonpath={.secrets[0].name}") -o "jsonpath={.data['token']}" | base64 -d > token
               kubectl -n kube-system get secrets kubi -o "jsonpath={.data['tls\.crt']}" | base64 -d > tls.crt
               kubectl -n kube-system get secrets kubi -o "jsonpath={.data['tls\.key']}" | base64 -d > tls.key
               kubectl -n kube-system get secrets kubi-encryption-secret -o "jsonpath={.data['ecdsa-key\.pem']}" | base64 -d > ecdsa-key.pem
               kubectl -n kube-system get secrets kubi-encryption-secret -o "jsonpath={.data['ecdsa-public\.pem']}" | base64 -d > ecdsa-public.pem
               sudo mv ca.crt /var/run/secrets/kubernetes.io/serviceaccount/
               sudo mv token /var/run/secrets/kubernetes.io/serviceaccount/
               sudo mv tls.crt /var/run/secrets/certs/
               sudo mv tls.key /var/run/secrets/certs/
               sudo mv ecdsa-public.pem /var/run/secrets/ecdsa/
               sudo mv ecdsa-key.pem /var/run/secrets/ecdsa/
               sudo ls /var/run/secrets/kubernetes.io/serviceaccount/
               sudo ls /var/run/secrets/ecdsa/
               sudo ls /var/run/secrets/certs/
               
               
      - name:  cloning kubi
        run:  |
              sudo apt install git
              git clone https://github.com/ca-gip/kubi.git
      
      - name : shecking for deploys
        run : |
              kubectl get all -n kube-system
              kubectl get configmap -n kube-system
              kubectl get secret -n kube-system
        
      - name :  get ldif data 
        run: |
             kubectl wait --for=condition=Ready pod -n kube-system -l app=kubi-ldap
             kubectl exec -n kube-system $(kubectl get pods -n kube-system -l app=kubi-ldap -o jsonpath='{.items[0].metadata.name}') -- ldapsearch -x -D "cn=admin,dc=kubi,dc=ca-gip,dc=github,dc=com" -w password "(objectclass=*)" "*"
   
         
          
      - name: Setting up kubeconfig ENV for Github Chaos Action
        run: echo ::set-env name=KUBE_CONFIG_DATA::$(base64 -w 0 ~/.kube/config)
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      
      - name: Setup Litmus
        uses: litmuschaos/github-chaos-actions@master
        env:
          INSTALL_LITMUS: true
      - name: Running "pod-delete" chaos experiment
        uses: litmuschaos/github-chaos-actions@master
        env:
          EXPERIMENT_NAME: pod-delete
          EXPERIMENT_IMAGE: litmuschaos/go-runner
          EXPERIMENT_IMAGE_TAG: ci
          JOB_CLEANUP_POLICY: delete
          APP_NS: kube-system
          APP_LABEL: app=kubi
          APP_KIND: deployment
          IMAGE_PULL_POLICY: Always
          TOTAL_CHAOS_DURATION: 30
          CHAOS_INTERVAL: 10
          FORCE: false
          
      - name: Running "pod-network-latency" chaos experiment
        uses: litmuschaos/github-chaos-actions@master
        env:
          EXPERIMENT_NAME: pod-network-latency
          EXPERIMENT_IMAGE: litmuschaos/go-runner
          EXPERIMENT_IMAGE_TAG: ci
          JOB_CLEANUP_POLICY: delete
          APP_NS: kube-system
          APP_LABEL: app=kubi
          TOTAL_CHAOS_DURATION: 60
          NETWORK_INTERFACE: eth0
          NETWORK_LATENCY: 60000
          CONTAINER_RUNTIME: containerd
          
      - name: Running "pod-network-loss" chaos experiment
        uses: litmuschaos/github-chaos-actions@master
        env:
          EXPERIMENT_NAME: pod-network-loss
          EXPERIMENT_IMAGE: litmuschaos/go-runner
          EXPERIMENT_IMAGE_TAG: ci
          JOB_CLEANUP_POLICY: delete
          APP_NS: kube-system
          APP_LABEL: app=kubi
          TOTAL_CHAOS_DURATION: 60
          NETWORK_INTERFACE: eth0
          NETWORK_PACKET_LOSS_PERCENTAGE: 100
          CONTAINER_RUNTIME: containerd
          
      - name: Uninstall Litmus
        if: always()
        uses: litmuschaos/github-chaos-actions@master
        env:
          LITMUS_CLEANUP: true
